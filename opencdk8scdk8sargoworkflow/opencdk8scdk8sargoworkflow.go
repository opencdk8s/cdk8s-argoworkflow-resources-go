// @opencdk8s/cdk8s-argoworkflow
package opencdk8scdk8sargoworkflow

import (
	"time"

	_jsii_ "github.com/aws/jsii-runtime-go/runtime"
	_init_ "github.com/opencdk8s/cdk8s-argoworkflow-resources-go/opencdk8scdk8sargoworkflow/jsii"

	"github.com/aws/constructs-go/constructs/v10"
	"github.com/cdk8s-team/cdk8s-core-go/cdk8s/v2"
	"github.com/opencdk8s/cdk8s-argoworkflow-resources-go/opencdk8scdk8sargoworkflow/internal"
	"github.com/opencdk8s/cdk8s-argoworkflow-resources-go/opencdk8scdk8sargoworkflow/k8s"
)

type ArchiveStrategy struct {
	None *NoneStrategy `field:"optional" json:"none" yaml:"none"`
	Tar *TarStrategy `field:"optional" json:"tar" yaml:"tar"`
	Zip *ZipStrategy `field:"optional" json:"zip" yaml:"zip"`
}

type ArchivedWorkflowDeletedResponse struct {
}

type ArgoWorkflowClusterWorkflowTemplate interface {
	cdk8s.ApiObject
	// The group portion of the API version (e.g. `authorization.k8s.io`).
	ApiGroup() *string
	// The object's API version (e.g. `authorization.k8s.io/v1`).
	ApiVersion() *string
	// The chart in which this object is defined.
	Chart() cdk8s.Chart
	// The object kind.
	Kind() *string
	// Metadata associated with this API object.
	Metadata() cdk8s.ApiObjectMetadataDefinition
	// The name of the API object.
	//
	// If a name is specified in `metadata.name` this will be the name returned.
	// Otherwise, a name will be generated by calling
	// `Chart.of(this).generatedObjectName(this)`, which by default uses the
	// construct path to generate a DNS-compatible name for the resource.
	Name() *string
	// The tree node.
	Node() constructs.Node
	// Create a dependency between this ApiObject and other constructs.
	//
	// These can be other ApiObjects, Charts, or custom.
	AddDependency(dependencies ...constructs.IConstruct)
	// Applies a set of RFC-6902 JSON-Patch operations to the manifest synthesized for this API object.
	//
	// Example:
	//     kubePod.addJsonPatch(JsonPatch.replace('/spec/enableServiceLinks', true));
	//
	AddJsonPatch(ops ...cdk8s.JsonPatch)
	// Renders the object to Kubernetes JSON.
	//
	// To disable sorting of dictionary keys in output object set the
	// `CDK8S_DISABLE_SORT` environment variable to any non-empty value.
	ToJson() interface{}
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for ArgoWorkflowClusterWorkflowTemplate
type jsiiProxy_ArgoWorkflowClusterWorkflowTemplate struct {
	internal.Type__cdk8sApiObject
}

func (j *jsiiProxy_ArgoWorkflowClusterWorkflowTemplate) ApiGroup() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiGroup",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ArgoWorkflowClusterWorkflowTemplate) ApiVersion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiVersion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ArgoWorkflowClusterWorkflowTemplate) Chart() cdk8s.Chart {
	var returns cdk8s.Chart
	_jsii_.Get(
		j,
		"chart",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ArgoWorkflowClusterWorkflowTemplate) Kind() *string {
	var returns *string
	_jsii_.Get(
		j,
		"kind",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ArgoWorkflowClusterWorkflowTemplate) Metadata() cdk8s.ApiObjectMetadataDefinition {
	var returns cdk8s.ApiObjectMetadataDefinition
	_jsii_.Get(
		j,
		"metadata",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ArgoWorkflowClusterWorkflowTemplate) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ArgoWorkflowClusterWorkflowTemplate) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}


func NewArgoWorkflowClusterWorkflowTemplate(scope constructs.Construct, name *string, props *ClusterWorkflowTemplate) ArgoWorkflowClusterWorkflowTemplate {
	_init_.Initialize()

	j := jsiiProxy_ArgoWorkflowClusterWorkflowTemplate{}

	_jsii_.Create(
		"@opencdk8s/cdk8s-argoworkflow.ArgoWorkflowClusterWorkflowTemplate",
		[]interface{}{scope, name, props},
		&j,
	)

	return &j
}

func NewArgoWorkflowClusterWorkflowTemplate_Override(a ArgoWorkflowClusterWorkflowTemplate, scope constructs.Construct, name *string, props *ClusterWorkflowTemplate) {
	_init_.Initialize()

	_jsii_.Create(
		"@opencdk8s/cdk8s-argoworkflow.ArgoWorkflowClusterWorkflowTemplate",
		[]interface{}{scope, name, props},
		a,
	)
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func ArgoWorkflowClusterWorkflowTemplate_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"@opencdk8s/cdk8s-argoworkflow.ArgoWorkflowClusterWorkflowTemplate",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func ArgoWorkflowClusterWorkflowTemplate_Manifest(props *ClusterWorkflowTemplate) interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"@opencdk8s/cdk8s-argoworkflow.ArgoWorkflowClusterWorkflowTemplate",
		"manifest",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Returns the `ApiObject` named `Resource` which is a child of the given construct.
//
// If `c` is an `ApiObject`, it is returned directly. Throws an
// exception if the construct does not have a child named `Default` _or_ if
// this child is not an `ApiObject`.
func ArgoWorkflowClusterWorkflowTemplate_Of(c constructs.IConstruct) cdk8s.ApiObject {
	_init_.Initialize()

	var returns cdk8s.ApiObject

	_jsii_.StaticInvoke(
		"@opencdk8s/cdk8s-argoworkflow.ArgoWorkflowClusterWorkflowTemplate",
		"of",
		[]interface{}{c},
		&returns,
	)

	return returns
}

func ArgoWorkflowClusterWorkflowTemplate_GVK() *cdk8s.GroupVersionKind {
	_init_.Initialize()
	var returns *cdk8s.GroupVersionKind
	_jsii_.StaticGet(
		"@opencdk8s/cdk8s-argoworkflow.ArgoWorkflowClusterWorkflowTemplate",
		"GVK",
		&returns,
	)
	return returns
}

func (a *jsiiProxy_ArgoWorkflowClusterWorkflowTemplate) AddDependency(dependencies ...constructs.IConstruct) {
	args := []interface{}{}
	for _, a := range dependencies {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		a,
		"addDependency",
		args,
	)
}

func (a *jsiiProxy_ArgoWorkflowClusterWorkflowTemplate) AddJsonPatch(ops ...cdk8s.JsonPatch) {
	args := []interface{}{}
	for _, a := range ops {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		a,
		"addJsonPatch",
		args,
	)
}

func (a *jsiiProxy_ArgoWorkflowClusterWorkflowTemplate) ToJson() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ArgoWorkflowClusterWorkflowTemplate) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

type ArgoWorkflowCronWorkflow interface {
	cdk8s.ApiObject
	// The group portion of the API version (e.g. `authorization.k8s.io`).
	ApiGroup() *string
	// The object's API version (e.g. `authorization.k8s.io/v1`).
	ApiVersion() *string
	// The chart in which this object is defined.
	Chart() cdk8s.Chart
	// The object kind.
	Kind() *string
	// Metadata associated with this API object.
	Metadata() cdk8s.ApiObjectMetadataDefinition
	// The name of the API object.
	//
	// If a name is specified in `metadata.name` this will be the name returned.
	// Otherwise, a name will be generated by calling
	// `Chart.of(this).generatedObjectName(this)`, which by default uses the
	// construct path to generate a DNS-compatible name for the resource.
	Name() *string
	// The tree node.
	Node() constructs.Node
	// Create a dependency between this ApiObject and other constructs.
	//
	// These can be other ApiObjects, Charts, or custom.
	AddDependency(dependencies ...constructs.IConstruct)
	// Applies a set of RFC-6902 JSON-Patch operations to the manifest synthesized for this API object.
	//
	// Example:
	//     kubePod.addJsonPatch(JsonPatch.replace('/spec/enableServiceLinks', true));
	//
	AddJsonPatch(ops ...cdk8s.JsonPatch)
	// Renders the object to Kubernetes JSON.
	//
	// To disable sorting of dictionary keys in output object set the
	// `CDK8S_DISABLE_SORT` environment variable to any non-empty value.
	ToJson() interface{}
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for ArgoWorkflowCronWorkflow
type jsiiProxy_ArgoWorkflowCronWorkflow struct {
	internal.Type__cdk8sApiObject
}

func (j *jsiiProxy_ArgoWorkflowCronWorkflow) ApiGroup() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiGroup",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ArgoWorkflowCronWorkflow) ApiVersion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiVersion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ArgoWorkflowCronWorkflow) Chart() cdk8s.Chart {
	var returns cdk8s.Chart
	_jsii_.Get(
		j,
		"chart",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ArgoWorkflowCronWorkflow) Kind() *string {
	var returns *string
	_jsii_.Get(
		j,
		"kind",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ArgoWorkflowCronWorkflow) Metadata() cdk8s.ApiObjectMetadataDefinition {
	var returns cdk8s.ApiObjectMetadataDefinition
	_jsii_.Get(
		j,
		"metadata",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ArgoWorkflowCronWorkflow) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ArgoWorkflowCronWorkflow) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}


func NewArgoWorkflowCronWorkflow(scope constructs.Construct, name *string, props *CronWorkflow) ArgoWorkflowCronWorkflow {
	_init_.Initialize()

	j := jsiiProxy_ArgoWorkflowCronWorkflow{}

	_jsii_.Create(
		"@opencdk8s/cdk8s-argoworkflow.ArgoWorkflowCronWorkflow",
		[]interface{}{scope, name, props},
		&j,
	)

	return &j
}

func NewArgoWorkflowCronWorkflow_Override(a ArgoWorkflowCronWorkflow, scope constructs.Construct, name *string, props *CronWorkflow) {
	_init_.Initialize()

	_jsii_.Create(
		"@opencdk8s/cdk8s-argoworkflow.ArgoWorkflowCronWorkflow",
		[]interface{}{scope, name, props},
		a,
	)
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func ArgoWorkflowCronWorkflow_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"@opencdk8s/cdk8s-argoworkflow.ArgoWorkflowCronWorkflow",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func ArgoWorkflowCronWorkflow_Manifest(props *CronWorkflow) interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"@opencdk8s/cdk8s-argoworkflow.ArgoWorkflowCronWorkflow",
		"manifest",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Returns the `ApiObject` named `Resource` which is a child of the given construct.
//
// If `c` is an `ApiObject`, it is returned directly. Throws an
// exception if the construct does not have a child named `Default` _or_ if
// this child is not an `ApiObject`.
func ArgoWorkflowCronWorkflow_Of(c constructs.IConstruct) cdk8s.ApiObject {
	_init_.Initialize()

	var returns cdk8s.ApiObject

	_jsii_.StaticInvoke(
		"@opencdk8s/cdk8s-argoworkflow.ArgoWorkflowCronWorkflow",
		"of",
		[]interface{}{c},
		&returns,
	)

	return returns
}

func ArgoWorkflowCronWorkflow_GVK() *cdk8s.GroupVersionKind {
	_init_.Initialize()
	var returns *cdk8s.GroupVersionKind
	_jsii_.StaticGet(
		"@opencdk8s/cdk8s-argoworkflow.ArgoWorkflowCronWorkflow",
		"GVK",
		&returns,
	)
	return returns
}

func (a *jsiiProxy_ArgoWorkflowCronWorkflow) AddDependency(dependencies ...constructs.IConstruct) {
	args := []interface{}{}
	for _, a := range dependencies {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		a,
		"addDependency",
		args,
	)
}

func (a *jsiiProxy_ArgoWorkflowCronWorkflow) AddJsonPatch(ops ...cdk8s.JsonPatch) {
	args := []interface{}{}
	for _, a := range ops {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		a,
		"addJsonPatch",
		args,
	)
}

func (a *jsiiProxy_ArgoWorkflowCronWorkflow) ToJson() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ArgoWorkflowCronWorkflow) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

type ArgoWorkflowWorkflowTemplate interface {
	cdk8s.ApiObject
	// The group portion of the API version (e.g. `authorization.k8s.io`).
	ApiGroup() *string
	// The object's API version (e.g. `authorization.k8s.io/v1`).
	ApiVersion() *string
	// The chart in which this object is defined.
	Chart() cdk8s.Chart
	// The object kind.
	Kind() *string
	// Metadata associated with this API object.
	Metadata() cdk8s.ApiObjectMetadataDefinition
	// The name of the API object.
	//
	// If a name is specified in `metadata.name` this will be the name returned.
	// Otherwise, a name will be generated by calling
	// `Chart.of(this).generatedObjectName(this)`, which by default uses the
	// construct path to generate a DNS-compatible name for the resource.
	Name() *string
	// The tree node.
	Node() constructs.Node
	// Create a dependency between this ApiObject and other constructs.
	//
	// These can be other ApiObjects, Charts, or custom.
	AddDependency(dependencies ...constructs.IConstruct)
	// Applies a set of RFC-6902 JSON-Patch operations to the manifest synthesized for this API object.
	//
	// Example:
	//     kubePod.addJsonPatch(JsonPatch.replace('/spec/enableServiceLinks', true));
	//
	AddJsonPatch(ops ...cdk8s.JsonPatch)
	// Renders the object to Kubernetes JSON.
	//
	// To disable sorting of dictionary keys in output object set the
	// `CDK8S_DISABLE_SORT` environment variable to any non-empty value.
	ToJson() interface{}
	// Returns a string representation of this construct.
	ToString() *string
}

// The jsii proxy struct for ArgoWorkflowWorkflowTemplate
type jsiiProxy_ArgoWorkflowWorkflowTemplate struct {
	internal.Type__cdk8sApiObject
}

func (j *jsiiProxy_ArgoWorkflowWorkflowTemplate) ApiGroup() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiGroup",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ArgoWorkflowWorkflowTemplate) ApiVersion() *string {
	var returns *string
	_jsii_.Get(
		j,
		"apiVersion",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ArgoWorkflowWorkflowTemplate) Chart() cdk8s.Chart {
	var returns cdk8s.Chart
	_jsii_.Get(
		j,
		"chart",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ArgoWorkflowWorkflowTemplate) Kind() *string {
	var returns *string
	_jsii_.Get(
		j,
		"kind",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ArgoWorkflowWorkflowTemplate) Metadata() cdk8s.ApiObjectMetadataDefinition {
	var returns cdk8s.ApiObjectMetadataDefinition
	_jsii_.Get(
		j,
		"metadata",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ArgoWorkflowWorkflowTemplate) Name() *string {
	var returns *string
	_jsii_.Get(
		j,
		"name",
		&returns,
	)
	return returns
}

func (j *jsiiProxy_ArgoWorkflowWorkflowTemplate) Node() constructs.Node {
	var returns constructs.Node
	_jsii_.Get(
		j,
		"node",
		&returns,
	)
	return returns
}


func NewArgoWorkflowWorkflowTemplate(scope constructs.Construct, name *string, props *WorkflowTemplate) ArgoWorkflowWorkflowTemplate {
	_init_.Initialize()

	j := jsiiProxy_ArgoWorkflowWorkflowTemplate{}

	_jsii_.Create(
		"@opencdk8s/cdk8s-argoworkflow.ArgoWorkflowWorkflowTemplate",
		[]interface{}{scope, name, props},
		&j,
	)

	return &j
}

func NewArgoWorkflowWorkflowTemplate_Override(a ArgoWorkflowWorkflowTemplate, scope constructs.Construct, name *string, props *WorkflowTemplate) {
	_init_.Initialize()

	_jsii_.Create(
		"@opencdk8s/cdk8s-argoworkflow.ArgoWorkflowWorkflowTemplate",
		[]interface{}{scope, name, props},
		a,
	)
}

// Checks if `x` is a construct.
//
// Returns: true if `x` is an object created from a class which extends `Construct`.
// Deprecated: use `x instanceof Construct` instead.
func ArgoWorkflowWorkflowTemplate_IsConstruct(x interface{}) *bool {
	_init_.Initialize()

	var returns *bool

	_jsii_.StaticInvoke(
		"@opencdk8s/cdk8s-argoworkflow.ArgoWorkflowWorkflowTemplate",
		"isConstruct",
		[]interface{}{x},
		&returns,
	)

	return returns
}

func ArgoWorkflowWorkflowTemplate_Manifest(props *WorkflowTemplate) interface{} {
	_init_.Initialize()

	var returns interface{}

	_jsii_.StaticInvoke(
		"@opencdk8s/cdk8s-argoworkflow.ArgoWorkflowWorkflowTemplate",
		"manifest",
		[]interface{}{props},
		&returns,
	)

	return returns
}

// Returns the `ApiObject` named `Resource` which is a child of the given construct.
//
// If `c` is an `ApiObject`, it is returned directly. Throws an
// exception if the construct does not have a child named `Default` _or_ if
// this child is not an `ApiObject`.
func ArgoWorkflowWorkflowTemplate_Of(c constructs.IConstruct) cdk8s.ApiObject {
	_init_.Initialize()

	var returns cdk8s.ApiObject

	_jsii_.StaticInvoke(
		"@opencdk8s/cdk8s-argoworkflow.ArgoWorkflowWorkflowTemplate",
		"of",
		[]interface{}{c},
		&returns,
	)

	return returns
}

func ArgoWorkflowWorkflowTemplate_GVK() *cdk8s.GroupVersionKind {
	_init_.Initialize()
	var returns *cdk8s.GroupVersionKind
	_jsii_.StaticGet(
		"@opencdk8s/cdk8s-argoworkflow.ArgoWorkflowWorkflowTemplate",
		"GVK",
		&returns,
	)
	return returns
}

func (a *jsiiProxy_ArgoWorkflowWorkflowTemplate) AddDependency(dependencies ...constructs.IConstruct) {
	args := []interface{}{}
	for _, a := range dependencies {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		a,
		"addDependency",
		args,
	)
}

func (a *jsiiProxy_ArgoWorkflowWorkflowTemplate) AddJsonPatch(ops ...cdk8s.JsonPatch) {
	args := []interface{}{}
	for _, a := range ops {
		args = append(args, a)
	}

	_jsii_.InvokeVoid(
		a,
		"addJsonPatch",
		args,
	)
}

func (a *jsiiProxy_ArgoWorkflowWorkflowTemplate) ToJson() interface{} {
	var returns interface{}

	_jsii_.Invoke(
		a,
		"toJson",
		nil, // no parameters
		&returns,
	)

	return returns
}

func (a *jsiiProxy_ArgoWorkflowWorkflowTemplate) ToString() *string {
	var returns *string

	_jsii_.Invoke(
		a,
		"toString",
		nil, // no parameters
		&returns,
	)

	return returns
}

type Arguments struct {
	Artifacts *[]*Artifact `field:"optional" json:"artifacts" yaml:"artifacts"`
	Parameters *[]*Parameter `field:"optional" json:"parameters" yaml:"parameters"`
}

type Artifact struct {
	Name *string `field:"required" json:"name" yaml:"name"`
	Archive *ArchiveStrategy `field:"optional" json:"archive" yaml:"archive"`
	ArchiveLogs *bool `field:"optional" json:"archiveLogs" yaml:"archiveLogs"`
	Artifactory *ArtifactoryArtifact `field:"optional" json:"artifactory" yaml:"artifactory"`
	From *string `field:"optional" json:"from" yaml:"from"`
	FromExpression *string `field:"optional" json:"fromExpression" yaml:"fromExpression"`
	Gcs *GCSArtifact `field:"optional" json:"gcs" yaml:"gcs"`
	Git *GitArtifact `field:"optional" json:"git" yaml:"git"`
	GlobalName *string `field:"optional" json:"globalName" yaml:"globalName"`
	Hdfs *HDFSArtifact `field:"optional" json:"hdfs" yaml:"hdfs"`
	Http *HTTPArtifact `field:"optional" json:"http" yaml:"http"`
	Mode *float64 `field:"optional" json:"mode" yaml:"mode"`
	Optional *bool `field:"optional" json:"optional" yaml:"optional"`
	Oss *OSSArtifact `field:"optional" json:"oss" yaml:"oss"`
	Path *string `field:"optional" json:"path" yaml:"path"`
	Raw *RawArtifact `field:"optional" json:"raw" yaml:"raw"`
	RecurseMode *bool `field:"optional" json:"recurseMode" yaml:"recurseMode"`
	S3 *S3Artifact `field:"optional" json:"s3" yaml:"s3"`
	SubPath *string `field:"optional" json:"subPath" yaml:"subPath"`
}

type ArtifactLocation struct {
	ArchiveLogs *bool `field:"optional" json:"archiveLogs" yaml:"archiveLogs"`
	Artifactory *ArtifactoryArtifact `field:"optional" json:"artifactory" yaml:"artifactory"`
	Gcs *GCSArtifact `field:"optional" json:"gcs" yaml:"gcs"`
	Git *GitArtifact `field:"optional" json:"git" yaml:"git"`
	Hdfs *HDFSArtifact `field:"optional" json:"hdfs" yaml:"hdfs"`
	Http *HTTPArtifact `field:"optional" json:"http" yaml:"http"`
	Oss *OSSArtifact `field:"optional" json:"oss" yaml:"oss"`
	Raw *RawArtifact `field:"optional" json:"raw" yaml:"raw"`
	S3 *S3Artifact `field:"optional" json:"s3" yaml:"s3"`
}

type ArtifactPaths struct {
	Name *string `field:"required" json:"name" yaml:"name"`
	Archive *ArchiveStrategy `field:"optional" json:"archive" yaml:"archive"`
	ArchiveLogs *bool `field:"optional" json:"archiveLogs" yaml:"archiveLogs"`
	Artifactory *ArtifactoryArtifact `field:"optional" json:"artifactory" yaml:"artifactory"`
	From *string `field:"optional" json:"from" yaml:"from"`
	FromExpression *string `field:"optional" json:"fromExpression" yaml:"fromExpression"`
	Gcs *GCSArtifact `field:"optional" json:"gcs" yaml:"gcs"`
	Git *GitArtifact `field:"optional" json:"git" yaml:"git"`
	GlobalName *string `field:"optional" json:"globalName" yaml:"globalName"`
	Hdfs *HDFSArtifact `field:"optional" json:"hdfs" yaml:"hdfs"`
	Http *HTTPArtifact `field:"optional" json:"http" yaml:"http"`
	Mode *float64 `field:"optional" json:"mode" yaml:"mode"`
	Optional *bool `field:"optional" json:"optional" yaml:"optional"`
	Oss *OSSArtifact `field:"optional" json:"oss" yaml:"oss"`
	Path *string `field:"optional" json:"path" yaml:"path"`
	Raw *RawArtifact `field:"optional" json:"raw" yaml:"raw"`
	RecurseMode *bool `field:"optional" json:"recurseMode" yaml:"recurseMode"`
	S3 *S3Artifact `field:"optional" json:"s3" yaml:"s3"`
	SubPath *string `field:"optional" json:"subPath" yaml:"subPath"`
}

type ArtifactRepositoryRef struct {
	ConfigMap *string `field:"optional" json:"configMap" yaml:"configMap"`
	Key *string `field:"optional" json:"key" yaml:"key"`
}

type ArtifactRepositoryRefStatus struct {
	ConfigMap *string `field:"optional" json:"configMap" yaml:"configMap"`
	Default *bool `field:"optional" json:"default" yaml:"default"`
	Key *string `field:"optional" json:"key" yaml:"key"`
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
}

type ArtifactoryArtifact struct {
	Url *string `field:"required" json:"url" yaml:"url"`
	PasswordSecret *k8s.SecretKeySelector `field:"optional" json:"passwordSecret" yaml:"passwordSecret"`
	UsernameSecret *k8s.SecretKeySelector `field:"optional" json:"usernameSecret" yaml:"usernameSecret"`
}

type Backoff struct {
	Duration *string `field:"optional" json:"duration" yaml:"duration"`
	Factor k8s.IntOrString `field:"optional" json:"factor" yaml:"factor"`
	MaxDuration *string `field:"optional" json:"maxDuration" yaml:"maxDuration"`
}

type Cache struct {
	ConfigMap *k8s.ConfigMapKeySelector `field:"required" json:"configMap" yaml:"configMap"`
}

type ClusterWorkflowTemplate struct {
	Metadata *k8s.ObjectMeta `field:"required" json:"metadata" yaml:"metadata"`
	Spec *WorkflowTemplateSpec `field:"required" json:"spec" yaml:"spec"`
	ApiVersion *string `field:"optional" json:"apiVersion" yaml:"apiVersion"`
	Kind *string `field:"optional" json:"kind" yaml:"kind"`
}

type ClusterWorkflowTemplateDeleteResponse struct {
}

type ClusterWorkflowTemplateLintRequest struct {
	CreateOptions *k8s.CreateOptions `field:"optional" json:"createOptions" yaml:"createOptions"`
	Template *ClusterWorkflowTemplate `field:"optional" json:"template" yaml:"template"`
}

type ClusterWorkflowTemplateList struct {
	Items *[]*ClusterWorkflowTemplate `field:"required" json:"items" yaml:"items"`
	Metadata *k8s.ListMeta `field:"required" json:"metadata" yaml:"metadata"`
	ApiVersion *string `field:"optional" json:"apiVersion" yaml:"apiVersion"`
	Kind *string `field:"optional" json:"kind" yaml:"kind"`
}

type ClusterWorkflowTemplateUpdateRequest struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
	Template *ClusterWorkflowTemplate `field:"optional" json:"template" yaml:"template"`
}

type Condition struct {
	Message *string `field:"optional" json:"message" yaml:"message"`
	Status *string `field:"optional" json:"status" yaml:"status"`
	Type *string `field:"optional" json:"type" yaml:"type"`
}

type ContainerNode struct {
	Name *string `field:"required" json:"name" yaml:"name"`
	Args *[]*string `field:"optional" json:"args" yaml:"args"`
	Command *[]*string `field:"optional" json:"command" yaml:"command"`
	Dependencies *[]*string `field:"optional" json:"dependencies" yaml:"dependencies"`
	Env *[]*k8s.EnvVar `field:"optional" json:"env" yaml:"env"`
	EnvFrom *[]*k8s.EnvFromSource `field:"optional" json:"envFrom" yaml:"envFrom"`
	Image *string `field:"optional" json:"image" yaml:"image"`
	ImagePullPolicy *string `field:"optional" json:"imagePullPolicy" yaml:"imagePullPolicy"`
	Lifecycle *k8s.Lifecycle `field:"optional" json:"lifecycle" yaml:"lifecycle"`
	LivenessProbe *k8s.Probe `field:"optional" json:"livenessProbe" yaml:"livenessProbe"`
	Ports *[]*k8s.ContainerPort `field:"optional" json:"ports" yaml:"ports"`
	ReadinessProbe *k8s.Probe `field:"optional" json:"readinessProbe" yaml:"readinessProbe"`
	Resources *k8s.ResourceRequirements `field:"optional" json:"resources" yaml:"resources"`
	SecurityContext *k8s.SecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
	StartupProbe *k8s.Probe `field:"optional" json:"startupProbe" yaml:"startupProbe"`
	Stdin *bool `field:"optional" json:"stdin" yaml:"stdin"`
	StdinOnce *bool `field:"optional" json:"stdinOnce" yaml:"stdinOnce"`
	TerminationMessagePath *string `field:"optional" json:"terminationMessagePath" yaml:"terminationMessagePath"`
	TerminationMessagePolicy *string `field:"optional" json:"terminationMessagePolicy" yaml:"terminationMessagePolicy"`
	Tty *bool `field:"optional" json:"tty" yaml:"tty"`
	VolumeDevices *[]*k8s.VolumeDevice `field:"optional" json:"volumeDevices" yaml:"volumeDevices"`
	VolumeMounts *[]*k8s.VolumeMount `field:"optional" json:"volumeMounts" yaml:"volumeMounts"`
	WorkingDir *string `field:"optional" json:"workingDir" yaml:"workingDir"`
}

type ContainerSetTemplate struct {
	Containers *[]*ContainerNode `field:"required" json:"containers" yaml:"containers"`
	VolumeMounts *[]*k8s.VolumeMount `field:"optional" json:"volumeMounts" yaml:"volumeMounts"`
}

type ContinueOn struct {
	Error *bool `field:"optional" json:"error" yaml:"error"`
	Failed *bool `field:"optional" json:"failed" yaml:"failed"`
}

type Counter struct {
	Value *string `field:"required" json:"value" yaml:"value"`
}

type CreateCronWorkflowRequest struct {
	CreateOptions *k8s.CreateOptions `field:"optional" json:"createOptions" yaml:"createOptions"`
	CronWorkflow *CronWorkflow `field:"optional" json:"cronWorkflow" yaml:"cronWorkflow"`
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
}

type CreateS3BucketOptions struct {
	ObjectLocking *bool `field:"optional" json:"objectLocking" yaml:"objectLocking"`
}

type CronWorkflow struct {
	Metadata *k8s.ObjectMeta `field:"required" json:"metadata" yaml:"metadata"`
	Spec *CronWorkflowSpec `field:"required" json:"spec" yaml:"spec"`
	Status *CronWorkflowStatus `field:"optional" json:"status" yaml:"status"`
}

type CronWorkflowDeletedResponse struct {
}

type CronWorkflowList struct {
	Items *[]*CronWorkflow `field:"required" json:"items" yaml:"items"`
	Metadata *k8s.ListMeta `field:"required" json:"metadata" yaml:"metadata"`
	ApiVersion *string `field:"optional" json:"apiVersion" yaml:"apiVersion"`
	Kind *string `field:"optional" json:"kind" yaml:"kind"`
}

type CronWorkflowResumeRequest struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
}

type CronWorkflowSpec struct {
	Schedule *string `field:"required" json:"schedule" yaml:"schedule"`
	WorkflowSpec *WorkflowSpec `field:"required" json:"workflowSpec" yaml:"workflowSpec"`
	ConcurrencyPolicy *string `field:"optional" json:"concurrencyPolicy" yaml:"concurrencyPolicy"`
	FailedJobsHistoryLimit *float64 `field:"optional" json:"failedJobsHistoryLimit" yaml:"failedJobsHistoryLimit"`
	StartingDeadlineSeconds *float64 `field:"optional" json:"startingDeadlineSeconds" yaml:"startingDeadlineSeconds"`
	SuccessfulJobsHistoryLimit *float64 `field:"optional" json:"successfulJobsHistoryLimit" yaml:"successfulJobsHistoryLimit"`
	Suspend *bool `field:"optional" json:"suspend" yaml:"suspend"`
	Timezone *string `field:"optional" json:"timezone" yaml:"timezone"`
	WorkflowMetadata *k8s.ObjectMeta `field:"optional" json:"workflowMetadata" yaml:"workflowMetadata"`
}

type CronWorkflowStatus struct {
	Active *[]*k8s.ObjectReference `field:"required" json:"active" yaml:"active"`
	Conditions *[]*Condition `field:"required" json:"conditions" yaml:"conditions"`
	LastScheduledTime *time.Time `field:"required" json:"lastScheduledTime" yaml:"lastScheduledTime"`
}

type CronWorkflowSuspendRequest struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
}

type DAGTask struct {
	Name *string `field:"required" json:"name" yaml:"name"`
	Arguments *Arguments `field:"optional" json:"arguments" yaml:"arguments"`
	ContinueOn *ContinueOn `field:"optional" json:"continueOn" yaml:"continueOn"`
	Dependencies *[]*string `field:"optional" json:"dependencies" yaml:"dependencies"`
	Depends *string `field:"optional" json:"depends" yaml:"depends"`
	OnExit *string `field:"optional" json:"onExit" yaml:"onExit"`
	Template *string `field:"optional" json:"template" yaml:"template"`
	TemplateRef *TemplateRef `field:"optional" json:"templateRef" yaml:"templateRef"`
	When *string `field:"optional" json:"when" yaml:"when"`
	WithItems *[]interface{} `field:"optional" json:"withItems" yaml:"withItems"`
	WithParam *string `field:"optional" json:"withParam" yaml:"withParam"`
	WithSequence *Sequence `field:"optional" json:"withSequence" yaml:"withSequence"`
}

type DAGTemplate struct {
	Tasks *[]*DAGTask `field:"required" json:"tasks" yaml:"tasks"`
	FailFast *bool `field:"optional" json:"failFast" yaml:"failFast"`
	Target *string `field:"optional" json:"target" yaml:"target"`
}

type Data struct {
	Source *DataSource `field:"required" json:"source" yaml:"source"`
	Transformation *[]*TransformationStep `field:"required" json:"transformation" yaml:"transformation"`
}

type DataSource struct {
	ArtifactPaths *ArtifactPaths `field:"optional" json:"artifactPaths" yaml:"artifactPaths"`
}

type Event struct {
	Selector *string `field:"required" json:"selector" yaml:"selector"`
}

type EventResponse struct {
}

type ExecutorConfig struct {
	ServiceAccountName *string `field:"optional" json:"serviceAccountName" yaml:"serviceAccountName"`
}

type GCSArtifact struct {
	Key *string `field:"required" json:"key" yaml:"key"`
	Bucket *string `field:"optional" json:"bucket" yaml:"bucket"`
	ServiceAccountKeySecret *k8s.SecretKeySelector `field:"optional" json:"serviceAccountKeySecret" yaml:"serviceAccountKeySecret"`
}

type Gauge struct {
	Realtime *bool `field:"required" json:"realtime" yaml:"realtime"`
	Value *string `field:"required" json:"value" yaml:"value"`
}

type GetUserInfoResponse struct {
	Email *string `field:"optional" json:"email" yaml:"email"`
	EmailVerified *bool `field:"optional" json:"emailVerified" yaml:"emailVerified"`
	Groups *[]*string `field:"optional" json:"groups" yaml:"groups"`
	Issuer *string `field:"optional" json:"issuer" yaml:"issuer"`
	ServiceAccountName *string `field:"optional" json:"serviceAccountName" yaml:"serviceAccountName"`
	Subject *string `field:"optional" json:"subject" yaml:"subject"`
}

type GitArtifact struct {
	Repo *string `field:"required" json:"repo" yaml:"repo"`
	Depth *float64 `field:"optional" json:"depth" yaml:"depth"`
	Fetch *[]*string `field:"optional" json:"fetch" yaml:"fetch"`
	InsecureIgnoreHostKey *bool `field:"optional" json:"insecureIgnoreHostKey" yaml:"insecureIgnoreHostKey"`
	PasswordSecret *k8s.SecretKeySelector `field:"optional" json:"passwordSecret" yaml:"passwordSecret"`
	Revision *string `field:"optional" json:"revision" yaml:"revision"`
	SshPrivateKeySecret *k8s.SecretKeySelector `field:"optional" json:"sshPrivateKeySecret" yaml:"sshPrivateKeySecret"`
	UsernameSecret *k8s.SecretKeySelector `field:"optional" json:"usernameSecret" yaml:"usernameSecret"`
}

type GoogleProtobufAny struct {
	TypeUrl *string `field:"optional" json:"typeUrl" yaml:"typeUrl"`
	Value *string `field:"optional" json:"value" yaml:"value"`
}

type GrpcGatewayRuntimeError struct {
	Code *float64 `field:"optional" json:"code" yaml:"code"`
	Details *[]*GoogleProtobufAny `field:"optional" json:"details" yaml:"details"`
	Error *string `field:"optional" json:"error" yaml:"error"`
	Message *string `field:"optional" json:"message" yaml:"message"`
}

type GrpcGatewayRuntimeStreamError struct {
	Details *[]*GoogleProtobufAny `field:"optional" json:"details" yaml:"details"`
	GrpcCode *float64 `field:"optional" json:"grpcCode" yaml:"grpcCode"`
	HttpCode *float64 `field:"optional" json:"httpCode" yaml:"httpCode"`
	HttpStatus *string `field:"optional" json:"httpStatus" yaml:"httpStatus"`
	Message *string `field:"optional" json:"message" yaml:"message"`
}

type HDFSArtifact struct {
	Path *string `field:"required" json:"path" yaml:"path"`
	Addresses *[]*string `field:"optional" json:"addresses" yaml:"addresses"`
	Force *bool `field:"optional" json:"force" yaml:"force"`
	HdfsUser *string `field:"optional" json:"hdfsUser" yaml:"hdfsUser"`
	KrbCCacheSecret *k8s.SecretKeySelector `field:"optional" json:"krbCCacheSecret" yaml:"krbCCacheSecret"`
	KrbConfigConfigMap *k8s.ConfigMapKeySelector `field:"optional" json:"krbConfigConfigMap" yaml:"krbConfigConfigMap"`
	KrbKeytabSecret *k8s.SecretKeySelector `field:"optional" json:"krbKeytabSecret" yaml:"krbKeytabSecret"`
	KrbRealm *string `field:"optional" json:"krbRealm" yaml:"krbRealm"`
	KrbServicePrincipalName *string `field:"optional" json:"krbServicePrincipalName" yaml:"krbServicePrincipalName"`
	KrbUsername *string `field:"optional" json:"krbUsername" yaml:"krbUsername"`
}

type HTTPArtifact struct {
	Url *string `field:"required" json:"url" yaml:"url"`
	Headers *[]*Header `field:"optional" json:"headers" yaml:"headers"`
}

type Header struct {
	Name *string `field:"required" json:"name" yaml:"name"`
	Value *string `field:"required" json:"value" yaml:"value"`
}

type Histogram struct {
	Buckets *[]*float64 `field:"required" json:"buckets" yaml:"buckets"`
	Value *string `field:"required" json:"value" yaml:"value"`
}

type InfoResponse struct {
	Links *[]*Link `field:"optional" json:"links" yaml:"links"`
	ManagedNamespace *string `field:"optional" json:"managedNamespace" yaml:"managedNamespace"`
}

type Inputs struct {
	Artifacts *[]*Artifact `field:"optional" json:"artifacts" yaml:"artifacts"`
	Parameters *[]*Parameter `field:"optional" json:"parameters" yaml:"parameters"`
}

type Link struct {
	Name *string `field:"required" json:"name" yaml:"name"`
	Scope *string `field:"required" json:"scope" yaml:"scope"`
	Url *string `field:"required" json:"url" yaml:"url"`
}

type LintCronWorkflowRequest struct {
	CronWorkflow *CronWorkflow `field:"optional" json:"cronWorkflow" yaml:"cronWorkflow"`
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
}

type LogEntry struct {
	Content *string `field:"optional" json:"content" yaml:"content"`
	PodName *string `field:"optional" json:"podName" yaml:"podName"`
}

type MemoizationStatus struct {
	CacheName *string `field:"required" json:"cacheName" yaml:"cacheName"`
	Hit *bool `field:"required" json:"hit" yaml:"hit"`
	Key *string `field:"required" json:"key" yaml:"key"`
}

type Memoize struct {
	Cache *Cache `field:"required" json:"cache" yaml:"cache"`
	Key *string `field:"required" json:"key" yaml:"key"`
	MaxAge *string `field:"required" json:"maxAge" yaml:"maxAge"`
}

type Metadata struct {
	Annotations *map[string]*string `field:"optional" json:"annotations" yaml:"annotations"`
	Labels *map[string]*string `field:"optional" json:"labels" yaml:"labels"`
}

type MetricLabel struct {
	Key *string `field:"required" json:"key" yaml:"key"`
	Value *string `field:"required" json:"value" yaml:"value"`
}

type Metrics struct {
	Prometheus *[]*Prometheus `field:"required" json:"prometheus" yaml:"prometheus"`
}

type Mutex struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
}

type MutexHolding struct {
	Holder *string `field:"optional" json:"holder" yaml:"holder"`
	Mutex *string `field:"optional" json:"mutex" yaml:"mutex"`
}

type MutexStatus struct {
	Holding *[]*MutexHolding `field:"optional" json:"holding" yaml:"holding"`
	Waiting *[]*MutexHolding `field:"optional" json:"waiting" yaml:"waiting"`
}

type NodeStatus struct {
	Id *string `field:"required" json:"id" yaml:"id"`
	Name *string `field:"required" json:"name" yaml:"name"`
	Type *string `field:"required" json:"type" yaml:"type"`
	BoundaryID *string `field:"optional" json:"boundaryID" yaml:"boundaryID"`
	Children *[]*string `field:"optional" json:"children" yaml:"children"`
	Daemoned *bool `field:"optional" json:"daemoned" yaml:"daemoned"`
	DisplayName *string `field:"optional" json:"displayName" yaml:"displayName"`
	EstimatedDuration *float64 `field:"optional" json:"estimatedDuration" yaml:"estimatedDuration"`
	FinishedAt *time.Time `field:"optional" json:"finishedAt" yaml:"finishedAt"`
	HostNodeName *string `field:"optional" json:"hostNodeName" yaml:"hostNodeName"`
	Inputs *Inputs `field:"optional" json:"inputs" yaml:"inputs"`
	MemoizationStatus *MemoizationStatus `field:"optional" json:"memoizationStatus" yaml:"memoizationStatus"`
	Message *string `field:"optional" json:"message" yaml:"message"`
	OutboundNodes *[]*string `field:"optional" json:"outboundNodes" yaml:"outboundNodes"`
	Outputs *Outputs `field:"optional" json:"outputs" yaml:"outputs"`
	Phase *string `field:"optional" json:"phase" yaml:"phase"`
	PodIP *string `field:"optional" json:"podIP" yaml:"podIP"`
	Progress *string `field:"optional" json:"progress" yaml:"progress"`
	ResourcesDuration *map[string]*float64 `field:"optional" json:"resourcesDuration" yaml:"resourcesDuration"`
	StartedAt *time.Time `field:"optional" json:"startedAt" yaml:"startedAt"`
	SynchronizationStatus *NodeSynchronizationStatus `field:"optional" json:"synchronizationStatus" yaml:"synchronizationStatus"`
	TemplateName *string `field:"optional" json:"templateName" yaml:"templateName"`
	TemplateRef *TemplateRef `field:"optional" json:"templateRef" yaml:"templateRef"`
	TemplateScope *string `field:"optional" json:"templateScope" yaml:"templateScope"`
}

type NodeSynchronizationStatus struct {
	Waiting *string `field:"optional" json:"waiting" yaml:"waiting"`
}

type NoneStrategy struct {
}

type OSSArtifact struct {
	Key *string `field:"required" json:"key" yaml:"key"`
	AccessKeySecret *k8s.SecretKeySelector `field:"optional" json:"accessKeySecret" yaml:"accessKeySecret"`
	Bucket *string `field:"optional" json:"bucket" yaml:"bucket"`
	CreateBucketIfNotPresent *bool `field:"optional" json:"createBucketIfNotPresent" yaml:"createBucketIfNotPresent"`
	Endpoint *string `field:"optional" json:"endpoint" yaml:"endpoint"`
	SecretKeySecret *k8s.SecretKeySelector `field:"optional" json:"secretKeySecret" yaml:"secretKeySecret"`
	SecurityToken *string `field:"optional" json:"securityToken" yaml:"securityToken"`
}

type Outputs struct {
	Artifacts *[]*Artifact `field:"optional" json:"artifacts" yaml:"artifacts"`
	ExitCode *string `field:"optional" json:"exitCode" yaml:"exitCode"`
	Parameters *[]*Parameter `field:"optional" json:"parameters" yaml:"parameters"`
	Result *string `field:"optional" json:"result" yaml:"result"`
}

type Parameter struct {
	Name *string `field:"required" json:"name" yaml:"name"`
	Default *string `field:"optional" json:"default" yaml:"default"`
	Description *string `field:"optional" json:"description" yaml:"description"`
	Enum *[]*string `field:"optional" json:"enum" yaml:"enum"`
	GlobalName *string `field:"optional" json:"globalName" yaml:"globalName"`
	Value *string `field:"optional" json:"value" yaml:"value"`
	ValueFrom *ValueFrom `field:"optional" json:"valueFrom" yaml:"valueFrom"`
}

type PodGC struct {
	LabelSelector *k8s.LabelSelector `field:"optional" json:"labelSelector" yaml:"labelSelector"`
	Strategy *string `field:"optional" json:"strategy" yaml:"strategy"`
}

type Prometheus struct {
	Help *string `field:"required" json:"help" yaml:"help"`
	Name *string `field:"required" json:"name" yaml:"name"`
	Counter *Counter `field:"optional" json:"counter" yaml:"counter"`
	Gauge *Gauge `field:"optional" json:"gauge" yaml:"gauge"`
	Histogram *Histogram `field:"optional" json:"histogram" yaml:"histogram"`
	Labels *[]*MetricLabel `field:"optional" json:"labels" yaml:"labels"`
	When *string `field:"optional" json:"when" yaml:"when"`
}

type RawArtifact struct {
	Data *string `field:"required" json:"data" yaml:"data"`
}

type ResourceTemplate struct {
	Action *string `field:"required" json:"action" yaml:"action"`
	FailureCondition *string `field:"optional" json:"failureCondition" yaml:"failureCondition"`
	Flags *[]*string `field:"optional" json:"flags" yaml:"flags"`
	Manifest *string `field:"optional" json:"manifest" yaml:"manifest"`
	MergeStrategy *string `field:"optional" json:"mergeStrategy" yaml:"mergeStrategy"`
	SetOwnerReference *bool `field:"optional" json:"setOwnerReference" yaml:"setOwnerReference"`
	SuccessCondition *string `field:"optional" json:"successCondition" yaml:"successCondition"`
}

type RetryAffinity struct {
	NodeAntiAffinity *RetryNodeAntiAffinity `field:"optional" json:"nodeAntiAffinity" yaml:"nodeAntiAffinity"`
}

type RetryNodeAntiAffinity struct {
}

type RetryStrategy struct {
	Affinity *RetryAffinity `field:"optional" json:"affinity" yaml:"affinity"`
	Backoff *Backoff `field:"optional" json:"backoff" yaml:"backoff"`
	Limit k8s.IntOrString `field:"optional" json:"limit" yaml:"limit"`
	RetryPolicy *string `field:"optional" json:"retryPolicy" yaml:"retryPolicy"`
}

type S3Artifact struct {
	AccessKeySecret *k8s.SecretKeySelector `field:"optional" json:"accessKeySecret" yaml:"accessKeySecret"`
	Bucket *string `field:"optional" json:"bucket" yaml:"bucket"`
	CreateBucketIfNotPresent *CreateS3BucketOptions `field:"optional" json:"createBucketIfNotPresent" yaml:"createBucketIfNotPresent"`
	Endpoint *string `field:"optional" json:"endpoint" yaml:"endpoint"`
	Insecure *bool `field:"optional" json:"insecure" yaml:"insecure"`
	Key *string `field:"optional" json:"key" yaml:"key"`
	Region *string `field:"optional" json:"region" yaml:"region"`
	RoleARN *string `field:"optional" json:"roleARN" yaml:"roleARN"`
	SecretKeySecret *k8s.SecretKeySelector `field:"optional" json:"secretKeySecret" yaml:"secretKeySecret"`
	UseSDKCreds *bool `field:"optional" json:"useSDKCreds" yaml:"useSDKCreds"`
}

type ScriptTemplate struct {
	Image *string `field:"required" json:"image" yaml:"image"`
	Source *string `field:"required" json:"source" yaml:"source"`
	Args *[]*string `field:"optional" json:"args" yaml:"args"`
	Command *[]*string `field:"optional" json:"command" yaml:"command"`
	Env *[]*k8s.EnvVar `field:"optional" json:"env" yaml:"env"`
	EnvFrom *[]*k8s.EnvFromSource `field:"optional" json:"envFrom" yaml:"envFrom"`
	ImagePullPolicy *string `field:"optional" json:"imagePullPolicy" yaml:"imagePullPolicy"`
	Lifecycle *k8s.Lifecycle `field:"optional" json:"lifecycle" yaml:"lifecycle"`
	LivenessProbe *k8s.Probe `field:"optional" json:"livenessProbe" yaml:"livenessProbe"`
	Name *string `field:"optional" json:"name" yaml:"name"`
	Ports *[]*k8s.ContainerPort `field:"optional" json:"ports" yaml:"ports"`
	ReadinessProbe *k8s.Probe `field:"optional" json:"readinessProbe" yaml:"readinessProbe"`
	Resources *k8s.ResourceRequirements `field:"optional" json:"resources" yaml:"resources"`
	SecurityContext *k8s.SecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
	StartupProbe *k8s.Probe `field:"optional" json:"startupProbe" yaml:"startupProbe"`
	Stdin *bool `field:"optional" json:"stdin" yaml:"stdin"`
	StdinOnce *bool `field:"optional" json:"stdinOnce" yaml:"stdinOnce"`
	TerminationMessagePath *string `field:"optional" json:"terminationMessagePath" yaml:"terminationMessagePath"`
	TerminationMessagePolicy *string `field:"optional" json:"terminationMessagePolicy" yaml:"terminationMessagePolicy"`
	Tty *bool `field:"optional" json:"tty" yaml:"tty"`
	VolumeDevices *[]*k8s.VolumeDevice `field:"optional" json:"volumeDevices" yaml:"volumeDevices"`
	VolumeMounts *[]*k8s.VolumeMount `field:"optional" json:"volumeMounts" yaml:"volumeMounts"`
	WorkingDir *string `field:"optional" json:"workingDir" yaml:"workingDir"`
}

type SemaphoreHolding struct {
	Holders *[]*string `field:"optional" json:"holders" yaml:"holders"`
	Semaphore *string `field:"optional" json:"semaphore" yaml:"semaphore"`
}

type SemaphoreRef struct {
	ConfigMapKeyRef *k8s.ConfigMapKeySelector `field:"optional" json:"configMapKeyRef" yaml:"configMapKeyRef"`
}

type SemaphoreStatus struct {
	Holding *[]*SemaphoreHolding `field:"optional" json:"holding" yaml:"holding"`
	Waiting *[]*SemaphoreHolding `field:"optional" json:"waiting" yaml:"waiting"`
}

type Sequence struct {
	Count k8s.IntOrString `field:"optional" json:"count" yaml:"count"`
	End k8s.IntOrString `field:"optional" json:"end" yaml:"end"`
	Format *string `field:"optional" json:"format" yaml:"format"`
	Start k8s.IntOrString `field:"optional" json:"start" yaml:"start"`
}

type Submit struct {
	WorkflowTemplateRef *WorkflowTemplateRef `field:"required" json:"workflowTemplateRef" yaml:"workflowTemplateRef"`
	Arguments *Arguments `field:"optional" json:"arguments" yaml:"arguments"`
	Metadata *k8s.ObjectMeta `field:"optional" json:"metadata" yaml:"metadata"`
}

type SubmitOpts struct {
	Annotations *string `field:"optional" json:"annotations" yaml:"annotations"`
	DryRun *bool `field:"optional" json:"dryRun" yaml:"dryRun"`
	EntryPoint *string `field:"optional" json:"entryPoint" yaml:"entryPoint"`
	GenerateName *string `field:"optional" json:"generateName" yaml:"generateName"`
	Labels *string `field:"optional" json:"labels" yaml:"labels"`
	Name *string `field:"optional" json:"name" yaml:"name"`
	OwnerReference *k8s.OwnerReference `field:"optional" json:"ownerReference" yaml:"ownerReference"`
	ParameterFile *string `field:"optional" json:"parameterFile" yaml:"parameterFile"`
	Parameters *[]*string `field:"optional" json:"parameters" yaml:"parameters"`
	ServerDryRun *bool `field:"optional" json:"serverDryRun" yaml:"serverDryRun"`
	ServiceAccount *string `field:"optional" json:"serviceAccount" yaml:"serviceAccount"`
}

type SuppliedValueFrom struct {
}

type SuspendTemplate struct {
	Duration *string `field:"optional" json:"duration" yaml:"duration"`
}

type Synchronization struct {
	Mutex *Mutex `field:"optional" json:"mutex" yaml:"mutex"`
	Semaphore *SemaphoreRef `field:"optional" json:"semaphore" yaml:"semaphore"`
}

type SynchronizationStatus struct {
	Mutex *MutexStatus `field:"optional" json:"mutex" yaml:"mutex"`
	Semaphore *SemaphoreStatus `field:"optional" json:"semaphore" yaml:"semaphore"`
}

type TTLStrategy struct {
	SecondsAfterCompletion *float64 `field:"optional" json:"secondsAfterCompletion" yaml:"secondsAfterCompletion"`
	SecondsAfterFailure *float64 `field:"optional" json:"secondsAfterFailure" yaml:"secondsAfterFailure"`
	SecondsAfterSuccess *float64 `field:"optional" json:"secondsAfterSuccess" yaml:"secondsAfterSuccess"`
}

type TarStrategy struct {
	CompressionLevel *float64 `field:"optional" json:"compressionLevel" yaml:"compressionLevel"`
}

type Template struct {
	ActiveDeadlineSeconds k8s.IntOrString `field:"optional" json:"activeDeadlineSeconds" yaml:"activeDeadlineSeconds"`
	Affinity *k8s.Affinity `field:"optional" json:"affinity" yaml:"affinity"`
	ArchiveLocation *ArtifactLocation `field:"optional" json:"archiveLocation" yaml:"archiveLocation"`
	AutomountServiceAccountToken *bool `field:"optional" json:"automountServiceAccountToken" yaml:"automountServiceAccountToken"`
	Container *k8s.Container `field:"optional" json:"container" yaml:"container"`
	ContainerSet *ContainerSetTemplate `field:"optional" json:"containerSet" yaml:"containerSet"`
	Daemon *bool `field:"optional" json:"daemon" yaml:"daemon"`
	Dag *DAGTemplate `field:"optional" json:"dag" yaml:"dag"`
	Data *Data `field:"optional" json:"data" yaml:"data"`
	Executor *ExecutorConfig `field:"optional" json:"executor" yaml:"executor"`
	FailFast *bool `field:"optional" json:"failFast" yaml:"failFast"`
	HostAliases *[]*k8s.HostAlias `field:"optional" json:"hostAliases" yaml:"hostAliases"`
	InitContainers *[]*UserContainer `field:"optional" json:"initContainers" yaml:"initContainers"`
	Inputs *Inputs `field:"optional" json:"inputs" yaml:"inputs"`
	Memoize *Memoize `field:"optional" json:"memoize" yaml:"memoize"`
	Metadata *Metadata `field:"optional" json:"metadata" yaml:"metadata"`
	Metrics *Metrics `field:"optional" json:"metrics" yaml:"metrics"`
	Name *string `field:"optional" json:"name" yaml:"name"`
	NodeSelector *map[string]*string `field:"optional" json:"nodeSelector" yaml:"nodeSelector"`
	Outputs *Outputs `field:"optional" json:"outputs" yaml:"outputs"`
	Parallelism *float64 `field:"optional" json:"parallelism" yaml:"parallelism"`
	PodSpecPatch *string `field:"optional" json:"podSpecPatch" yaml:"podSpecPatch"`
	Priority *float64 `field:"optional" json:"priority" yaml:"priority"`
	PriorityClassName *string `field:"optional" json:"priorityClassName" yaml:"priorityClassName"`
	Resource *ResourceTemplate `field:"optional" json:"resource" yaml:"resource"`
	RetryStrategy *RetryStrategy `field:"optional" json:"retryStrategy" yaml:"retryStrategy"`
	SchedulerName *string `field:"optional" json:"schedulerName" yaml:"schedulerName"`
	Script *ScriptTemplate `field:"optional" json:"script" yaml:"script"`
	SecurityContext *k8s.PodSecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
	ServiceAccountName *string `field:"optional" json:"serviceAccountName" yaml:"serviceAccountName"`
	Sidecars *[]*UserContainer `field:"optional" json:"sidecars" yaml:"sidecars"`
	Steps *[]*[]*WorkflowStep `field:"optional" json:"steps" yaml:"steps"`
	Suspend *SuspendTemplate `field:"optional" json:"suspend" yaml:"suspend"`
	Synchronization *Synchronization `field:"optional" json:"synchronization" yaml:"synchronization"`
	Timeout *string `field:"optional" json:"timeout" yaml:"timeout"`
	Tolerations *[]*k8s.Toleration `field:"optional" json:"tolerations" yaml:"tolerations"`
	Volumes *[]*k8s.Volume `field:"optional" json:"volumes" yaml:"volumes"`
}

type TemplateRef struct {
	ClusterScope *bool `field:"optional" json:"clusterScope" yaml:"clusterScope"`
	Name *string `field:"optional" json:"name" yaml:"name"`
	Template *string `field:"optional" json:"template" yaml:"template"`
}

type TransformationStep struct {
	Expression *string `field:"required" json:"expression" yaml:"expression"`
}

type UpdateCronWorkflowRequest struct {
	CronWorkflow *CronWorkflow `field:"optional" json:"cronWorkflow" yaml:"cronWorkflow"`
	Name *string `field:"optional" json:"name" yaml:"name"`
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
}

type UserContainer struct {
	Name *string `field:"required" json:"name" yaml:"name"`
	Args *[]*string `field:"optional" json:"args" yaml:"args"`
	Command *[]*string `field:"optional" json:"command" yaml:"command"`
	Env *[]*k8s.EnvVar `field:"optional" json:"env" yaml:"env"`
	EnvFrom *[]*k8s.EnvFromSource `field:"optional" json:"envFrom" yaml:"envFrom"`
	Image *string `field:"optional" json:"image" yaml:"image"`
	ImagePullPolicy *string `field:"optional" json:"imagePullPolicy" yaml:"imagePullPolicy"`
	Lifecycle *k8s.Lifecycle `field:"optional" json:"lifecycle" yaml:"lifecycle"`
	LivenessProbe *k8s.Probe `field:"optional" json:"livenessProbe" yaml:"livenessProbe"`
	MirrorVolumeMounts *bool `field:"optional" json:"mirrorVolumeMounts" yaml:"mirrorVolumeMounts"`
	Ports *[]*k8s.ContainerPort `field:"optional" json:"ports" yaml:"ports"`
	ReadinessProbe *k8s.Probe `field:"optional" json:"readinessProbe" yaml:"readinessProbe"`
	Resources *k8s.ResourceRequirements `field:"optional" json:"resources" yaml:"resources"`
	SecurityContext *k8s.SecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
	StartupProbe *k8s.Probe `field:"optional" json:"startupProbe" yaml:"startupProbe"`
	Stdin *bool `field:"optional" json:"stdin" yaml:"stdin"`
	StdinOnce *bool `field:"optional" json:"stdinOnce" yaml:"stdinOnce"`
	TerminationMessagePath *string `field:"optional" json:"terminationMessagePath" yaml:"terminationMessagePath"`
	TerminationMessagePolicy *string `field:"optional" json:"terminationMessagePolicy" yaml:"terminationMessagePolicy"`
	Tty *bool `field:"optional" json:"tty" yaml:"tty"`
	VolumeDevices *[]*k8s.VolumeDevice `field:"optional" json:"volumeDevices" yaml:"volumeDevices"`
	VolumeMounts *[]*k8s.VolumeMount `field:"optional" json:"volumeMounts" yaml:"volumeMounts"`
	WorkingDir *string `field:"optional" json:"workingDir" yaml:"workingDir"`
}

type ValueFrom struct {
	ConfigMapKeyRef *k8s.ConfigMapKeySelector `field:"optional" json:"configMapKeyRef" yaml:"configMapKeyRef"`
	Default *string `field:"optional" json:"default" yaml:"default"`
	Event *string `field:"optional" json:"event" yaml:"event"`
	Expression *string `field:"optional" json:"expression" yaml:"expression"`
	JqFilter *string `field:"optional" json:"jqFilter" yaml:"jqFilter"`
	JsonPath *string `field:"optional" json:"jsonPath" yaml:"jsonPath"`
	Parameter *string `field:"optional" json:"parameter" yaml:"parameter"`
	Path *string `field:"optional" json:"path" yaml:"path"`
	Supplied *SuppliedValueFrom `field:"optional" json:"supplied" yaml:"supplied"`
}

type Version struct {
	BuildDate *string `field:"required" json:"buildDate" yaml:"buildDate"`
	Compiler *string `field:"required" json:"compiler" yaml:"compiler"`
	GitCommit *string `field:"required" json:"gitCommit" yaml:"gitCommit"`
	GitTag *string `field:"required" json:"gitTag" yaml:"gitTag"`
	GitTreeState *string `field:"required" json:"gitTreeState" yaml:"gitTreeState"`
	GoVersion *string `field:"required" json:"goVersion" yaml:"goVersion"`
	Platform *string `field:"required" json:"platform" yaml:"platform"`
	Version *string `field:"required" json:"version" yaml:"version"`
}

type VolumeClaimGC struct {
	Strategy *string `field:"optional" json:"strategy" yaml:"strategy"`
}

type Workflow struct {
	Metadata *k8s.ObjectMeta `field:"required" json:"metadata" yaml:"metadata"`
	Spec *WorkflowSpec `field:"required" json:"spec" yaml:"spec"`
	ApiVersion *string `field:"optional" json:"apiVersion" yaml:"apiVersion"`
	Kind *string `field:"optional" json:"kind" yaml:"kind"`
	Status *WorkflowStatus `field:"optional" json:"status" yaml:"status"`
}

type WorkflowCreateRequest struct {
	CreateOptions *k8s.CreateOptions `field:"optional" json:"createOptions" yaml:"createOptions"`
	InstanceID *string `field:"optional" json:"instanceID" yaml:"instanceID"`
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
	ServerDryRun *bool `field:"optional" json:"serverDryRun" yaml:"serverDryRun"`
	Workflow *Workflow `field:"optional" json:"workflow" yaml:"workflow"`
}

type WorkflowDeleteResponse struct {
}

type WorkflowEventBinding struct {
	Metadata *k8s.ObjectMeta `field:"required" json:"metadata" yaml:"metadata"`
	Spec *WorkflowEventBindingSpec `field:"required" json:"spec" yaml:"spec"`
	ApiVersion *string `field:"optional" json:"apiVersion" yaml:"apiVersion"`
	Kind *string `field:"optional" json:"kind" yaml:"kind"`
}

type WorkflowEventBindingList struct {
	Items *[]*WorkflowEventBinding `field:"required" json:"items" yaml:"items"`
	Metadata *k8s.ListMeta `field:"required" json:"metadata" yaml:"metadata"`
	ApiVersion *string `field:"optional" json:"apiVersion" yaml:"apiVersion"`
	Kind *string `field:"optional" json:"kind" yaml:"kind"`
}

type WorkflowEventBindingSpec struct {
	Event *Event `field:"required" json:"event" yaml:"event"`
	Submit *Submit `field:"optional" json:"submit" yaml:"submit"`
}

type WorkflowLintRequest struct {
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
	Workflow *Workflow `field:"optional" json:"workflow" yaml:"workflow"`
}

type WorkflowList struct {
	Items *[]*Workflow `field:"required" json:"items" yaml:"items"`
	Metadata *k8s.ListMeta `field:"required" json:"metadata" yaml:"metadata"`
	ApiVersion *string `field:"optional" json:"apiVersion" yaml:"apiVersion"`
	Kind *string `field:"optional" json:"kind" yaml:"kind"`
}

type WorkflowResubmitRequest struct {
	Memoized *bool `field:"optional" json:"memoized" yaml:"memoized"`
	Name *string `field:"optional" json:"name" yaml:"name"`
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
}

type WorkflowResumeRequest struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
	NodeFieldSelector *string `field:"optional" json:"nodeFieldSelector" yaml:"nodeFieldSelector"`
}

type WorkflowRetryRequest struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
	NodeFieldSelector *string `field:"optional" json:"nodeFieldSelector" yaml:"nodeFieldSelector"`
	RestartSuccessful *bool `field:"optional" json:"restartSuccessful" yaml:"restartSuccessful"`
}

type WorkflowSetRequest struct {
	Message *string `field:"optional" json:"message" yaml:"message"`
	Name *string `field:"optional" json:"name" yaml:"name"`
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
	NodeFieldSelector *string `field:"optional" json:"nodeFieldSelector" yaml:"nodeFieldSelector"`
	OutputParameters *string `field:"optional" json:"outputParameters" yaml:"outputParameters"`
	Phase *string `field:"optional" json:"phase" yaml:"phase"`
}

type WorkflowSpec struct {
	ActiveDeadlineSeconds *float64 `field:"optional" json:"activeDeadlineSeconds" yaml:"activeDeadlineSeconds"`
	Affinity *k8s.Affinity `field:"optional" json:"affinity" yaml:"affinity"`
	Arguments *Arguments `field:"optional" json:"arguments" yaml:"arguments"`
	ArtifactRepositoryRef *ArtifactRepositoryRef `field:"optional" json:"artifactRepositoryRef" yaml:"artifactRepositoryRef"`
	AutomountServiceAccountToken *bool `field:"optional" json:"automountServiceAccountToken" yaml:"automountServiceAccountToken"`
	DnsConfig *k8s.PodDnsConfig `field:"optional" json:"dnsConfig" yaml:"dnsConfig"`
	DnsPolicy *string `field:"optional" json:"dnsPolicy" yaml:"dnsPolicy"`
	Entrypoint *string `field:"optional" json:"entrypoint" yaml:"entrypoint"`
	Executor *ExecutorConfig `field:"optional" json:"executor" yaml:"executor"`
	HostAliases *[]*k8s.HostAlias `field:"optional" json:"hostAliases" yaml:"hostAliases"`
	HostNetwork *bool `field:"optional" json:"hostNetwork" yaml:"hostNetwork"`
	ImagePullSecrets *[]*k8s.LocalObjectReference `field:"optional" json:"imagePullSecrets" yaml:"imagePullSecrets"`
	Metrics *Metrics `field:"optional" json:"metrics" yaml:"metrics"`
	NodeSelector *map[string]*string `field:"optional" json:"nodeSelector" yaml:"nodeSelector"`
	OnExit *string `field:"optional" json:"onExit" yaml:"onExit"`
	Parallelism *float64 `field:"optional" json:"parallelism" yaml:"parallelism"`
	PodDisruptionBudget *k8s.PodDisruptionBudgetSpec `field:"optional" json:"podDisruptionBudget" yaml:"podDisruptionBudget"`
	PodGC *PodGC `field:"optional" json:"podGC" yaml:"podGC"`
	PodMetadata *Metadata `field:"optional" json:"podMetadata" yaml:"podMetadata"`
	PodPriority *float64 `field:"optional" json:"podPriority" yaml:"podPriority"`
	PodPriorityClassName *string `field:"optional" json:"podPriorityClassName" yaml:"podPriorityClassName"`
	PodSpecPatch *string `field:"optional" json:"podSpecPatch" yaml:"podSpecPatch"`
	Priority *float64 `field:"optional" json:"priority" yaml:"priority"`
	RetryStrategy *RetryStrategy `field:"optional" json:"retryStrategy" yaml:"retryStrategy"`
	SchedulerName *string `field:"optional" json:"schedulerName" yaml:"schedulerName"`
	SecurityContext *k8s.PodSecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
	ServiceAccountName *string `field:"optional" json:"serviceAccountName" yaml:"serviceAccountName"`
	Shutdown *string `field:"optional" json:"shutdown" yaml:"shutdown"`
	Suspend *bool `field:"optional" json:"suspend" yaml:"suspend"`
	Synchronization *Synchronization `field:"optional" json:"synchronization" yaml:"synchronization"`
	TemplateDefaults *Template `field:"optional" json:"templateDefaults" yaml:"templateDefaults"`
	Templates *[]*Template `field:"optional" json:"templates" yaml:"templates"`
	Tolerations *[]*k8s.Toleration `field:"optional" json:"tolerations" yaml:"tolerations"`
	TtlStrategy *TTLStrategy `field:"optional" json:"ttlStrategy" yaml:"ttlStrategy"`
	VolumeClaimGC *VolumeClaimGC `field:"optional" json:"volumeClaimGC" yaml:"volumeClaimGC"`
	VolumeClaimTemplates *[]*k8s.KubePersistentVolumeClaimProps `field:"optional" json:"volumeClaimTemplates" yaml:"volumeClaimTemplates"`
	Volumes *[]*k8s.Volume `field:"optional" json:"volumes" yaml:"volumes"`
	WorkflowTemplateRef *WorkflowTemplateRef `field:"optional" json:"workflowTemplateRef" yaml:"workflowTemplateRef"`
}

type WorkflowStatus struct {
	ArtifactRepositoryRef *ArtifactRepositoryRefStatus `field:"optional" json:"artifactRepositoryRef" yaml:"artifactRepositoryRef"`
	CompressedNodes *string `field:"optional" json:"compressedNodes" yaml:"compressedNodes"`
	Conditions *[]*Condition `field:"optional" json:"conditions" yaml:"conditions"`
	EstimatedDuration *float64 `field:"optional" json:"estimatedDuration" yaml:"estimatedDuration"`
	FinishedAt *time.Time `field:"optional" json:"finishedAt" yaml:"finishedAt"`
	Message *string `field:"optional" json:"message" yaml:"message"`
	Nodes *map[string]*NodeStatus `field:"optional" json:"nodes" yaml:"nodes"`
	OffloadNodeStatusVersion *string `field:"optional" json:"offloadNodeStatusVersion" yaml:"offloadNodeStatusVersion"`
	Outputs *Outputs `field:"optional" json:"outputs" yaml:"outputs"`
	PersistentVolumeClaimSpecs *[]*k8s.Volume `field:"optional" json:"persistentVolumeClaimSpecs" yaml:"persistentVolumeClaimSpecs"`
	Phase *string `field:"optional" json:"phase" yaml:"phase"`
	Progress *string `field:"optional" json:"progress" yaml:"progress"`
	ResourcesDuration *map[string]*float64 `field:"optional" json:"resourcesDuration" yaml:"resourcesDuration"`
	StartedAt *time.Time `field:"optional" json:"startedAt" yaml:"startedAt"`
	StoredTemplates *map[string]*Template `field:"optional" json:"storedTemplates" yaml:"storedTemplates"`
	StoredWorkflowTemplateSpec *WorkflowSpec `field:"optional" json:"storedWorkflowTemplateSpec" yaml:"storedWorkflowTemplateSpec"`
	Synchronization *SynchronizationStatus `field:"optional" json:"synchronization" yaml:"synchronization"`
}

type WorkflowStep struct {
	Arguments *Arguments `field:"optional" json:"arguments" yaml:"arguments"`
	ContinueOn *ContinueOn `field:"optional" json:"continueOn" yaml:"continueOn"`
	Name *string `field:"optional" json:"name" yaml:"name"`
	OnExit *string `field:"optional" json:"onExit" yaml:"onExit"`
	Template *string `field:"optional" json:"template" yaml:"template"`
	TemplateRef *TemplateRef `field:"optional" json:"templateRef" yaml:"templateRef"`
	When *string `field:"optional" json:"when" yaml:"when"`
	WithItems *[]interface{} `field:"optional" json:"withItems" yaml:"withItems"`
	WithParam *string `field:"optional" json:"withParam" yaml:"withParam"`
	WithSequence *Sequence `field:"optional" json:"withSequence" yaml:"withSequence"`
}

type WorkflowStopRequest struct {
	Message *string `field:"optional" json:"message" yaml:"message"`
	Name *string `field:"optional" json:"name" yaml:"name"`
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
	NodeFieldSelector *string `field:"optional" json:"nodeFieldSelector" yaml:"nodeFieldSelector"`
}

type WorkflowSubmitRequest struct {
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
	ResourceKind *string `field:"optional" json:"resourceKind" yaml:"resourceKind"`
	ResourceName *string `field:"optional" json:"resourceName" yaml:"resourceName"`
	SubmitOptions *SubmitOpts `field:"optional" json:"submitOptions" yaml:"submitOptions"`
}

type WorkflowSuspendRequest struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
}

type WorkflowTemplate struct {
	Metadata *k8s.ObjectMeta `field:"required" json:"metadata" yaml:"metadata"`
	Spec *WorkflowTemplateSpec `field:"required" json:"spec" yaml:"spec"`
	ApiVersion *string `field:"optional" json:"apiVersion" yaml:"apiVersion"`
	Kind *string `field:"optional" json:"kind" yaml:"kind"`
}

type WorkflowTemplateCreateRequest struct {
	CreateOptions *k8s.CreateOptions `field:"optional" json:"createOptions" yaml:"createOptions"`
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
	Template *WorkflowTemplate `field:"optional" json:"template" yaml:"template"`
}

type WorkflowTemplateDeleteResponse struct {
}

type WorkflowTemplateLintRequest struct {
	CreateOptions *k8s.CreateOptions `field:"optional" json:"createOptions" yaml:"createOptions"`
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
	Template *WorkflowTemplate `field:"optional" json:"template" yaml:"template"`
}

type WorkflowTemplateList struct {
	Items *[]*WorkflowTemplate `field:"required" json:"items" yaml:"items"`
	Metadata *k8s.ListMeta `field:"required" json:"metadata" yaml:"metadata"`
	ApiVersion *string `field:"optional" json:"apiVersion" yaml:"apiVersion"`
	Kind *string `field:"optional" json:"kind" yaml:"kind"`
}

type WorkflowTemplateRef struct {
	ClusterScope *bool `field:"optional" json:"clusterScope" yaml:"clusterScope"`
	Name *string `field:"optional" json:"name" yaml:"name"`
}

type WorkflowTemplateSpec struct {
	ActiveDeadlineSeconds *float64 `field:"optional" json:"activeDeadlineSeconds" yaml:"activeDeadlineSeconds"`
	Affinity *k8s.Affinity `field:"optional" json:"affinity" yaml:"affinity"`
	Arguments *Arguments `field:"optional" json:"arguments" yaml:"arguments"`
	ArtifactRepositoryRef *ArtifactRepositoryRef `field:"optional" json:"artifactRepositoryRef" yaml:"artifactRepositoryRef"`
	AutomountServiceAccountToken *bool `field:"optional" json:"automountServiceAccountToken" yaml:"automountServiceAccountToken"`
	DnsConfig *k8s.PodDnsConfig `field:"optional" json:"dnsConfig" yaml:"dnsConfig"`
	DnsPolicy *string `field:"optional" json:"dnsPolicy" yaml:"dnsPolicy"`
	Entrypoint *string `field:"optional" json:"entrypoint" yaml:"entrypoint"`
	Executor *ExecutorConfig `field:"optional" json:"executor" yaml:"executor"`
	HostAliases *[]*k8s.HostAlias `field:"optional" json:"hostAliases" yaml:"hostAliases"`
	HostNetwork *bool `field:"optional" json:"hostNetwork" yaml:"hostNetwork"`
	ImagePullSecrets *[]*k8s.LocalObjectReference `field:"optional" json:"imagePullSecrets" yaml:"imagePullSecrets"`
	Metrics *Metrics `field:"optional" json:"metrics" yaml:"metrics"`
	NodeSelector *map[string]*string `field:"optional" json:"nodeSelector" yaml:"nodeSelector"`
	OnExit *string `field:"optional" json:"onExit" yaml:"onExit"`
	Parallelism *float64 `field:"optional" json:"parallelism" yaml:"parallelism"`
	PodDisruptionBudget *k8s.PodDisruptionBudgetSpec `field:"optional" json:"podDisruptionBudget" yaml:"podDisruptionBudget"`
	PodGC *PodGC `field:"optional" json:"podGC" yaml:"podGC"`
	PodMetadata *Metadata `field:"optional" json:"podMetadata" yaml:"podMetadata"`
	PodPriority *float64 `field:"optional" json:"podPriority" yaml:"podPriority"`
	PodPriorityClassName *string `field:"optional" json:"podPriorityClassName" yaml:"podPriorityClassName"`
	PodSpecPatch *string `field:"optional" json:"podSpecPatch" yaml:"podSpecPatch"`
	Priority *float64 `field:"optional" json:"priority" yaml:"priority"`
	RetryStrategy *RetryStrategy `field:"optional" json:"retryStrategy" yaml:"retryStrategy"`
	SchedulerName *string `field:"optional" json:"schedulerName" yaml:"schedulerName"`
	SecurityContext *k8s.PodSecurityContext `field:"optional" json:"securityContext" yaml:"securityContext"`
	ServiceAccountName *string `field:"optional" json:"serviceAccountName" yaml:"serviceAccountName"`
	Shutdown *string `field:"optional" json:"shutdown" yaml:"shutdown"`
	Suspend *bool `field:"optional" json:"suspend" yaml:"suspend"`
	Synchronization *Synchronization `field:"optional" json:"synchronization" yaml:"synchronization"`
	TemplateDefaults *Template `field:"optional" json:"templateDefaults" yaml:"templateDefaults"`
	Templates *[]*Template `field:"optional" json:"templates" yaml:"templates"`
	Tolerations *[]*k8s.Toleration `field:"optional" json:"tolerations" yaml:"tolerations"`
	TtlStrategy *TTLStrategy `field:"optional" json:"ttlStrategy" yaml:"ttlStrategy"`
	VolumeClaimGC *VolumeClaimGC `field:"optional" json:"volumeClaimGC" yaml:"volumeClaimGC"`
	VolumeClaimTemplates *[]*k8s.PersistentVolumeClaimSpec `field:"optional" json:"volumeClaimTemplates" yaml:"volumeClaimTemplates"`
	Volumes *[]*k8s.Volume `field:"optional" json:"volumes" yaml:"volumes"`
	WorkflowMetadata *k8s.ObjectMeta `field:"optional" json:"workflowMetadata" yaml:"workflowMetadata"`
	WorkflowTemplateRef *WorkflowTemplateRef `field:"optional" json:"workflowTemplateRef" yaml:"workflowTemplateRef"`
}

type WorkflowTemplateUpdateRequest struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
	Template *WorkflowTemplate `field:"optional" json:"template" yaml:"template"`
}

type WorkflowTerminateRequest struct {
	Name *string `field:"optional" json:"name" yaml:"name"`
	Namespace *string `field:"optional" json:"namespace" yaml:"namespace"`
}

type WorkflowWatchEvent struct {
	Object *Workflow `field:"optional" json:"object" yaml:"object"`
	Type *string `field:"optional" json:"type" yaml:"type"`
}

type ZipStrategy struct {
}

